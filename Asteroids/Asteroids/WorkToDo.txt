This file will have the assigned work to do for Logan and Conner
Logan must update this file with the information of task to do and who is supposed to be doing it
(Assigned) = someone give that to someone else
(in progress) = working on it
(for review) = elfre please check it
(completed) = elfre checked it and said it was good (if assigned again, you must go and read comments and work in it)

Example

Name: Logan 
Progress: Assigned
Level: Urgent
Task: Create a configuration file to add all properties of the project. (config.h) 
Comments: none for now.



/*

///////////////////////////////////////////////////////////////////////
///  RANDOM LITTLE ADD INS
///////////////////////////////////////////////////////////////////////
--CONNER
I added the rotation of the asteroids to the game
and the breakapart function that I made. (you said you wanted that)

///////////////////////////////////////////////////////////////////////
///  CLASSIC MODE
///////////////////////////////////////////////////////////////////////

Assigned to:  CONNER
Task: Impliment multiple levels by having more asteroids spawn when you destroy all the asteroids
Progress: DONE
Level: Easy
Comments: none, I tried to comment everything I did. :)

Assigned to:    LOGAN
Task: Assign score to asteroids and have it increment total score
Progress: 
Level:
Comments:


Assigned to:    ELFRE   :)
Task: write the high score to a file
Progress: 
Level:
Comments:


Assigned to:  CONNER
Task: put all constants in this configureation file
Progress: DONE
Level: Simple
Comments: I took all the existing constants and put them into that file
			If there are more, just put them into that file when you make them.


Assigned to:  CONNER
Task: fix the breaking apart (medium asteroids are stopping)
Progress: DONE
Level: Good
Comments: I just took my break apart methods for large and medium asteroids
			and replaced your logic with mine. I hope that's what you wanted me
			to do. 


Assigned to:    LOGAN
Task: make the asteroids bounce off each other
Progress: 
Level:
Comments:




///////////////////////////////////////////////////////////////////////
///  BONUS MODE
///////////////////////////////////////////////////////////////////////


Assigned to:  CONNER
Task: Sonic Boom
Progress: 
Level:
Comments:


Assigned to:  CONNER
Task: Delta team
Progress: 
Level:
Comments:


Assigned to:    LOGAN
Task: Sheild
Progress: 
Level:
Comments:

Assigned to:  CONNER
Task: Shotgun
Progress: in progress
Level: Pretty annoying
Comments: For some reason my bullet class and ship class were
			freaking out and now it won't compile, saying that
			the Bullet constructor can't convert Ship to a Bullet
			and I don't understand why it's trying to do that. 
			Also, it won't recognize the other files...?


Assigned to:    LOGAN
Task: Extra Life
Progress: 
Level:
Comments:


Assigned to:  CONNER
Task: Asteroid tracking bullets
Progress: 
Level:
Comments:



///////////////////////////////////////////////////////////////////////
///  SURVIVAL MODE
///////////////////////////////////////////////////////////////////////

Assigned to:    LOGAN
Task: Asteroids track the ship
Progress: 
Level:
Comments:




///////////////////////////////////////////////////////////////////////
///  Menu Class
///////////////////////////////////////////////////////////////////////

Assigned to:    LOGAN
Task: start menu
Progress: 
Level:
Comments:



Assigned to:    LOGAN
Task: prompt to play again
Progress: 
Level:
Comments:



Assigned to:    LOGAN
Task: option to switch modes
Progress: 
Level:
Comments:



Assigned to:    LOGAN
Task: Survival mode death message
Progress: 
Level:
Comments:



Assigned to:    LOGAN
Task: classic mode death message
Progress: 
Level:
Comments:



Assigned to:    LOGAN
Task: Bonus mode death message
Progress: 
Level:
Comments:




*/


//********************************CONNER'S SCREW UP STUFF
ship.h
	void shotgun(std::list<Bullet*> &bullets, Ship* &pShip);

ship.cpp

void Ship::shotgun(std::list<Bullet*> &bullets, Ship* &pShip)
{
	for (int i = SHOTGUN_LEFT_LIMIT; i < SHOTGUN_RIGHT_LIMIT; i++)
	{
		Bullet* pBullet = new Bullet(*pShip, i);
		bullets.push_back(pBullet);
	}
}

bullet.h

// For shotgun
	Bullet(Ship& ship, int orentation);

bullet.cpp

Bullet::Bullet(Ship &ship, int orientation)
{
	setLocation(ship.getLocation());
	setAlive(true);
	alive = BULLET_LIFE;
	setVelocity(ship.getVelocity());

	//make an intial Velocity for the bullet based on the orientarion of the ship
	Velocity initialVelicity(ship.getAngle(), BULLET_SPEED);

	// sets the Velocity of the bullet based on the relative velocity of the ship
	velocity = initialVelicity + ship.getVelocity();

	//puts the location of the bullet at the tip of the ship
	float x = ship.getLocation().getX() + 10 * cos((ship.getAngle()* 3.14) / 180);
	float y = ship.getLocation().getY() + 10 * sin((ship.getAngle()* 3.14) / 180);
	location = Point(x, y);

	//wraps the bullet     // for testing purposes
	location.setWrap(true);
}

game.cpp
		  pShip->shotgun(bullets, pShip);

